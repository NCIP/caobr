package edu.wustl.caobr.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import edu.wustl.caobr.Annotation;

/**
 * This is a thread pool executor service.
 * @author chandrakant_talele
 */
public class ObrThreadPoolExecutor {
    private static final int poolSize = 500;

    private static ExecutorService executor = init();

    /**
     * initialize the executor service
     */
    private static ExecutorService init() {
        return Executors.newFixedThreadPool(poolSize);
    }
    /**
     * Returns annotations for each URL parameter String. 
     * @param urlParamForPostCall
     * @return List of annotations retrieved for given URLs  
     */
    public List<Annotation> getAnnotations(List<Map<String, String>> urlParamForPostCall) {
        if(executor.isShutdown() || executor.isTerminated()) {
            executor = init();
        }
        List<Future<List<Annotation>>> futures = new ArrayList<Future<List<Annotation>>>(100);
        for (Map<String, String> urlParam : urlParamForPostCall) {
            FetchAnnotationFromRestTask task = new FetchAnnotationFromRestTask(urlParam);
            Future<List<Annotation>> future = executor.submit(task);
            futures.add(future);
        }
        return collectAnnotationsFromEachTask(futures);
    }

    /**
     * Collections annotations generated by each Task using its future object
     * @param futures List of future objects
     * @return List of annotations
     */
    private List<Annotation> collectAnnotationsFromEachTask(List<Future<List<Annotation>>> futures) {
        List<Annotation> annotations = new ArrayList<Annotation>();
        for (Future<List<Annotation>> future : futures) {
            try {
                List<Annotation> result = future.get();
                annotations.addAll(result);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (ExecutionException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        return annotations;
    }
}
